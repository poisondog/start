cmake_minimum_required(VERSION 2.8.12)

project (${PROJECT_NAME} CXX C)

set(CMAKE_SYSTEM_NAME Linux)
set(CMAKE_C_COMPILER  arm-linux-gnueabi-gcc)
set(CMAKE_CXX_COMPILER  arm-linux-gnueabi-g++)

set(LIBRARY_NAME_ARM_STATIC "${LIBRARY_NAME}-arm-static")
set(LIBRARY_NAME_ARM_SHARE "${LIBRARY_NAME}-arm-share")
include_directories(${LIBRARY_HEADER_FOLDER} ${LIBRARY_CLASS_FOLDER} ${REFERENCE_INCLUDE})

#create library file
add_library(${LIBRARY_NAME_ARM_STATIC} STATIC ${LIBRARY_CLASS_FILES} ${LIBRARY_HEADER_FILES})
add_library(${LIBRARY_NAME_ARM_SHARE} SHARED ${LIBRARY_CLASS_FILES} ${LIBRARY_HEADER_FILES})

set_target_properties(${LIBRARY_NAME_ARM_STATIC} PROPERTIES LINKER_LANGUAGE CXX)
set_target_properties(${LIBRARY_NAME_ARM_SHARE} PROPERTIES LINKER_LANGUAGE CXX)
set_target_properties(${LIBRARY_NAME_ARM_STATIC} PROPERTIES OUTPUT_NAME ${LIBRARY_NAME})
set_target_properties(${LIBRARY_NAME_ARM_SHARE} PROPERTIES OUTPUT_NAME ${LIBRARY_NAME})
set_target_properties(${LIBRARY_NAME_ARM_STATIC} PROPERTIES CLEAN_DIRECT_OUTPUT 1)
set_target_properties(${LIBRARY_NAME_ARM_SHARE} PROPERTIES CLEAN_DIRECT_OUTPUT 1)
set_target_properties(${LIBRARY_NAME_ARM_STATIC} PROPERTIES VERSION ${VERSION})
set_target_properties(${LIBRARY_NAME_ARM_SHARE} PROPERTIES VERSION ${VERSION})

#create executable file
add_executable(${PROJECT_NAME}-arm ${MAIN_CLASS_FILES})
set_target_properties(${PROJECT_NAME}-arm PROPERTIES OUTPUT_NAME ${PROJECT_NAME})
set_target_properties(${PROJECT_NAME}-arm PROPERTIES CLEAN_DIRECT_OUTPUT 1)
target_link_libraries(${PROJECT_NAME}-arm ${LIBRARY_NAME_ARM_STATIC} ${REFERENCE_ARM_LIBRARY})
